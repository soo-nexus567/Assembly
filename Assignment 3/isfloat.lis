     1                                  global isfloat
     2                                  
     3                                  null equ 0
     4                                  true equ -1
     5                                  false equ 0
     6                                  
     7                                  segment .data
     8                                     ; This segment is empty
     9                                  
    10                                  segment .bss
    11                                     ; This segment is empty
    12                                  
    13                                  segment .text
    14                                  isfloat:
    15                                  
    16                                  ; Back up registers to protect caller data
    17 00000000 55                      push rbp
    18 00000001 4889E5                  mov  rbp,rsp
    19 00000004 57                      push rdi
    20 00000005 56                      push rsi
    21 00000006 52                      push rdx
    22 00000007 51                      push rcx
    23 00000008 4150                    push r8
    24 0000000A 4151                    push r9
    25 0000000C 4152                    push r10
    26 0000000E 4153                    push r11
    27 00000010 4154                    push r12
    28 00000012 4155                    push r13
    29 00000014 4156                    push r14
    30 00000016 4157                    push r15
    31 00000018 53                      push rbx
    32 00000019 9C                      pushf
    33                                  
    34                                  ; Make a copy of the passed-in array of ASCII values
    35 0000001A 4989FD                  mov r13, rdi
    36 0000001D 4D31F6                  xor r14, r14  ; Initialize r14 as the array index
    37                                  
    38                                  ; Check for leading '+' or '-' signs
    39 00000020 41807D002B              cmp byte [r13], '+'  ; Check for '+'
    40 00000025 7407                    je increment_index
    41 00000027 41807D002D              cmp byte [r13], '-'  ; Check for '-'
    42 0000002C 7503                    jne continue_validation
    43                                  
    44                                  increment_index:
    45 0000002E 49FFC6                  inc r14
    46                                  
    47                                  continue_validation:
    48                                  
    49                                  ; Loop to validate chars before the decimal point
    50                                  loop_before_point:
    51 00000031 B800000000                 mov rax, 0
    52 00000036 4831FF                     xor rdi, rdi  ; Zero out rdi
    53 00000039 438A7C3500                 mov dil, byte [r13 + r14]  ; Load the next byte into rdi
    54 0000003E E85C000000                 call is_digit
    55 00000043 4883F800                   cmp rax, false
    56 00000047 7405                       je is_it_radix_point
    57 00000049 49FFC6                     inc r14
    58 0000004C EBE3                       jmp loop_before_point
    59                                  
    60                                  is_it_radix_point:
    61                                  ; Check if the next character is a radix point '.'
    62 0000004E 43807C35002E            cmp byte [r13 + r14], '.'
    63 00000054 752C                    jne return_false  ; If not, return false (invalid input)
    64                                  
    65                                  ; Loop to validate digits after the radix point
    66                                  start_loop_after_finding_a_point:
    67 00000056 49FFC6                      inc r14
    68 00000059 B800000000                  mov rax, 0
    69 0000005E 4831FF                      xor rdi, rdi
    70 00000061 438A7C3500                  mov dil, byte [r13 + r14]
    71 00000066 E834000000                  call is_digit
    72 0000006B 4883F800                    cmp rax, false
    73 0000006F 75E5                        jne start_loop_after_finding_a_point
    74                                  
    75                                  ; Check for end of string (null terminator)
    76 00000071 43807C350000            cmp byte [r13 + r14], null
    77 00000077 7509                    jne return_false  ; If it's not the end of the string, return false
    78 00000079 48C7C0FFFFFFFF          mov rax, true  ; Return true if a valid float
    79                                  
    80 00000080 EB05                    jmp restore_gpr_registers
    81                                  
    82                                  return_false:
    83 00000082 B800000000              mov rax, false  ; Return false if input is not a valid float
    84                                  
    85                                  restore_gpr_registers:
    86                                  ; Restore all general purpose registers
    87 00000087 9D                      popf
    88 00000088 5B                      pop rbx
    89 00000089 415F                    pop r15
    90 0000008B 415E                    pop r14
    91 0000008D 415D                    pop r13
    92 0000008F 415C                    pop r12
    93 00000091 415B                    pop r11
    94 00000093 415A                    pop r10
    95 00000095 4159                    pop r9
    96 00000097 4158                    pop r8
    97 00000099 59                      pop rcx
    98 0000009A 5A                      pop rdx
    99 0000009B 5E                      pop rsi
   100 0000009C 5F                      pop rdi
   101 0000009D 5D                      pop rbp
   102                                  
   103 0000009E C3                      ret
   104                                  
   105                                  
   106                                  ;=================== is_digit function ==========================
   107                                  
   108                                  true equ -1
   109                                  false equ 0
   110                                  ascii_value_of_zero equ 0x30
   111                                  ascii_value_of_nine equ 0x39
   112                                  
   113                                  segment .text
   114                                  is_digit:
   115                                  ; Back up registers
   116 0000009F 55                      push rbp
   117 000000A0 4889E5                  mov rbp, rsp
   118 000000A3 57                      push rdi
   119 000000A4 56                      push rsi
   120 000000A5 52                      push rdx
   121 000000A6 51                      push rcx
   122 000000A7 4150                    push r8
   123 000000A9 4151                    push r9
   124 000000AB 4152                    push r10
   125 000000AD 4153                    push r11
   126 000000AF 4154                    push r12
   127 000000B1 4155                    push r13
   128 000000B3 4156                    push r14
   129 000000B5 4157                    push r15
   130 000000B7 53                      push rbx
   131 000000B8 9C                      pushf
   132                                  
   133                                  ; Copy the passed-in character (rdi) to r13
   134 000000B9 4188FD                  mov r13b, dil
   135                                  
   136                                  ; Check if the character is between '0' and '9'
   137 000000BC 4180FD30                cmp r13b, ascii_value_of_zero
   138 000000C0 7C12                    jl is_digit_return_false
   139 000000C2 4180FD39                cmp r13b, ascii_value_of_nine
   140 000000C6 7F0C                    jg is_digit_return_false
   141                                  
   142                                  ; Return true if it's a valid digit
   143 000000C8 4831C0                  xor rax, rax
   144 000000CB 48C7C0FFFFFFFF          mov rax, true
   145                                  
   146 000000D2 EB08                    jmp is_digit_restore_gpr_registers
   147                                  
   148                                  is_digit_return_false:
   149 000000D4 4831C0                  xor rax, rax
   150 000000D7 B800000000              mov rax, false
   151                                  
   152                                  is_digit_restore_gpr_registers:
   153                                  ; Restore registers
   154 000000DC 9D                      popf
   155 000000DD 5B                      pop rbx
   156 000000DE 415F                    pop r15
   157 000000E0 415E                    pop r14
   158 000000E2 415D                    pop r13
   159 000000E4 415C                    pop r12
   160 000000E6 415B                    pop r11
   161 000000E8 415A                    pop r10
   162 000000EA 4159                    pop r9
   163 000000EC 4158                    pop r8
   164 000000EE 59                      pop rcx
   165 000000EF 5A                      pop rdx
   166 000000F0 5E                      pop rsi
   167 000000F1 5F                      pop rdi
   168 000000F2 5D                      pop rbp
   169                                  
   170 000000F3 C3                      ret
