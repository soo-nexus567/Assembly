     1                                  ;Copyright Info
     2                                  ;  "Assignment 1" is free software: you can redistribute it and/or modify
     3                                  ;  it under the terms of the GNU General Public License as published by
     4                                  ;  the Free Software Foundation, either version 3 of the License, or
     5                                  ;  (at your option) any later version.
     6                                  
     7                                  ;  "Assignment 1" is distributed in the hope that it will be useful,
     8                                  ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
     9                                  ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    10                                  ;  GNU General Public License for more details.
    11                                  
    12                                  ;  You should have received a copy of the GNU General Public License
    13                                  ;  along with this program.  If not, see <https://www.gnu.org/licenses/>.
    14                                  ;Author information
    15                                  ;  Author name: Jonathan Soo
    16                                  ;  Author email: jonathansoo07@csu.fullerton.edu
    17                                  ;  Author section: 240-11
    18                                  ;  Author CWID : 884776980
    19                                  ;Purpose
    20                                  ;  Calculate the third side of a triangle using float-point arthmetic
    21                                  ;  Get input from user and ouput using C functions
    22                                  ;Program information
    23                                  ;  Program name: Assignment 1
    24                                  ;  Copyright (C) <2025> <Jonathan Soo>
    25                                  ;  Programming languages: One modules in C and one module in X86
    26                                  ;  Date program began:     2025-Mar-05
    27                                  ;  Date program completed: 2025-Feb-07
    28                                  ;  Date comments upgraded: 2025-Feb-08
    29                                  ;  Files in this program: geometry.c, triangle.asm, r.sh
    30                                  ;  Status: Complete.  No errors found after extensive testing.
    31                                  ;
    32                                  ;This file
    33                                  ;   File name: triangle.asm
    34                                  ;   Language: X86-64 with Linux Syntax
    35                                  ;   Assemble: nasm -f elf64 triangle.asm -o triangle.o
    36                                  ;   Editor: VS Code
    37                                  ;   Link: gcc -m64 -Wall -fno-pie -no-pie -z noexecstack -o learn.out triangle.o geometry.o -lm 
    38                                  
    39                                  global manger
    40                                      extern printf
    41                                  segment .data
    42 00000000 546865736520736964-         invalid_triangle_msg db "These sides do not form a valid triangle.", 10, 0
    42 00000009 657320646F206E6F74-
    42 00000012 20666F726D20612076-
    42 0000001B 616C69642074726961-
    42 00000024 6E676C652E0A00     
    43 0000002B 546865207369646573-         valid_triangle_msg db "The sides form a valid triangle.", 10, 0
    43 00000034 20666F726D20612076-
    43 0000003D 616C69642074726961-
    43 00000046 6E676C652E0A00     
    44                                  segment .bss
    45                                      ; Temporary input buffer
    46                                  segment .text
    47                                      global istriangle
    48                                  istriangle:
    49                                      ; Save the base pointer
    50 00000000 55                          push    rbp
    51 00000001 4889E5                      mov     rbp, rsp
    52                                  
    53                                      ; Save the general purpose registers
    54 00000004 53                          push    rbx
    55 00000005 51                          push    rcx
    56 00000006 52                          push    rdx
    57 00000007 56                          push    rsi
    58 00000008 57                          push    rdi
    59 00000009 4150                        push    r8 
    60 0000000B 4151                        push    r9 
    61 0000000D 4152                        push    r10
    62 0000000F 4153                        push    r11
    63 00000011 4154                        push    r12
    64 00000013 4155                        push    r13
    65 00000015 4156                        push    r14
    66 00000017 4157                        push    r15
    67 00000019 9C                          pushf
    68                                  
    69                                      ; Check if any side is non-positive
    70 0000001A F20F1007                    movsd xmm0, [rdi]           ; Load side 1 into xmm0
    71 0000001E F20F100E                    movsd xmm1, [rsi]           ; Load side 2 into xmm1
    72 00000022 F20F1012                    movsd xmm2, [rdx]           ; Load side 3 into xmm2
    73 00000026 660F57DB                    xorpd xmm3, xmm3            ; Set xmm3 to 0 (for comparison with 0)
    74                                  
    75                                      ; Check if any side <= 0
    76 0000002A 660F2FC3                    comisd xmm0, xmm3         ; Compare side 1 with 0
    77 0000002E 7653                        jbe invalid_triangle
    78                                  
    79 00000030 660F2FCB                    comisd xmm1, xmm3         ; Compare side 2 with 0
    80 00000034 764D                        jbe invalid_triangle
    81                                  
    82 00000036 660F2FD3                    comisd xmm2, xmm3         ; Compare side 3 with 0
    83 0000003A 7647                        jbe invalid_triangle
    84                                  
    85                                      ; Check triangle inequality: side1 + side2 > side3
    86 0000003C F20F1007                    movsd xmm0, [rdi]           ; side1
    87 00000040 F20F58C1                    addsd xmm0, xmm1            ; side1 + side2
    88 00000044 660F2FC2                    comisd xmm0, xmm2           ; Compare (side1 + side2) with side3
    89 00000048 7639                        jbe invalid_triangle
    90                                  
    91                                      ; Check: side1 + side3 > side2
    92 0000004A F20F1007                    movsd xmm0, [rdi]           ; side1
    93 0000004E F20F58C2                    addsd xmm0, xmm2            ; side1 + side3
    94 00000052 660F2FC1                    comisd xmm0, xmm1           ; Compare (side1 + side3) with side2
    95 00000056 762B                        jbe invalid_triangle
    96                                  
    97                                      ; Check: side2 + side3 > side1
    98 00000058 F20F1006                    movsd xmm0, [rsi]           ; side2
    99 0000005C F20F58C2                    addsd xmm0, xmm2            ; side2 + side3
   100 00000060 660F2FC1                    comisd xmm0, xmm1           ; Compare (side2 + side3) with side1
   101 00000064 761D                        jbe invalid_triangle
   102                                  
   103 00000066 B801000000                  mov rax, 1
   104                                      ; If all checks pass, the triangle is valid
   105 0000006B 9D                          popf          
   106 0000006C 415F                        pop     r15
   107 0000006E 415E                        pop     r14
   108 00000070 415D                        pop     r13
   109 00000072 415C                        pop     r12
   110 00000074 415B                        pop     r11
   111 00000076 415A                        pop     r10
   112 00000078 4159                        pop     r9 
   113 0000007A 4158                        pop     r8 
   114 0000007C 5F                          pop     rdi
   115 0000007D 5E                          pop     rsi
   116 0000007E 5A                          pop     rdx
   117 0000007F 59                          pop     rcx
   118 00000080 5B                          pop     rbx
   119                                  
   120                                      ; Restore the base pointer
   121 00000081 5D                          pop     rbp
   122 00000082 C3                          ret
   123                                  invalid_triangle:
   124 00000083 48C7C0FFFFFFFF              mov rax, -1
   125 0000008A 9D                          popf          
   126 0000008B 415F                        pop     r15
   127 0000008D 415E                        pop     r14
   128 0000008F 415D                        pop     r13
   129 00000091 415C                        pop     r12
   130 00000093 415B                        pop     r11
   131 00000095 415A                        pop     r10
   132 00000097 4159                        pop     r9 
   133 00000099 4158                        pop     r8 
   134 0000009B 5F                          pop     rdi
   135 0000009C 5E                          pop     rsi
   136 0000009D 5A                          pop     rdx
   137 0000009E 59                          pop     rcx
   138 0000009F 5B                          pop     rbx
   139                                  
   140                                      ; Restore the base pointer
   141 000000A0 5D                          pop     rbp
   142 000000A1 C3                          ret
